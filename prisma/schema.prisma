// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "./.prisma/client"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(uuid())
    name          String
    email         String?   @unique
    password      String?
    emailVerified DateTime? @map("email_verified")
    image         String?
    role          String    @default("USER")
    isActive      Boolean   @default(true)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    pages         Page[]

    @@map("users")
}


model Post {
    id          String   @id @default(cuid())
    title       String
    slug        String   @unique
    description String?
    content     String
    published   Boolean  @default(false)
    authorId    String   @map("author_id")
    author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    publishedAt DateTime?

    @@map("posts")
}

model Page {
    id          String   @id @default(cuid())
    title       String
    slug        String   @unique
    description String?
    content     String
    published   Boolean  @default(false)
    authorId    String   @map("author_id")
    author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    publishedAt DateTime?

    @@map("pages")
}

model Account {
    id                String   @id @default(cuid())
    userId            String   @map("user_id")
    type              String?
    provider          String
    providerAccountId String   @map("provider_account_id")
    token_type        String?
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    scope             String?
    id_token          String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    userId       String?  @map("user_id")
    sessionToken String   @unique @map("session_token")
    accessToken  String?  @map("access_token")
    expires      DateTime
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@map("sessions")
}

model VerificationRequest {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}
